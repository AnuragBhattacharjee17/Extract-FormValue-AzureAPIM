<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
	
	<set-variable name="form_key" value="@(context.Request.Body.As<String>(preserveContent: true))" />
	
	<!-- Extract form value through key, here the form key is Endpoint and value will be Dynamic backend endpoint-->
        <set-variable name="form_endpoint" value="@{
        string s = context.Variables.GetValueOrDefault<string>("form_key");
        string[] stringSeparators = new string[] { "----------------------------" };
        string[] stringSeparators1 = new string[] { "\n" };
        string[] result = s.Split(stringSeparators,StringSplitOptions.RemoveEmptyEntries);
        string key = "name=\"Endpoint\"";
        string value = "";
        foreach(string item in result){
			if(item.Contains(key)){
				string[] result1 = item.Split(stringSeparators1, StringSplitOptions.RemoveEmptyEntries); 
                value = result1[3].Replace("\r","");
            }
		}
        return value;
        }" />
	<!-- ###### Form Value Extraction ends ###### -->

        <!-- ###### Setting up Dynamic Backekend Host ###### -->
        <set-backend-service base-url="@{
        string url = context.Variables.GetValueOrDefault<string>("form_endpoint");
        string[] split = url.Split(':');
		string port = split[2];
        string host = split[0]+":"+split[1]+":"+port.Substring(0, port.IndexOf("/"));
        return host;
        }" />
	<!-- ###### Setting Dynamic Host Ends ###### -->

	<!-- ###### Setting up Dynamic Operation Uri Path ###### -->
        <rewrite-uri template="@{
        string url = context.Variables.GetValueOrDefault<string>("form_endpoint");
        string[] split = url.Split(':');
		string port = split[2];
        string path = port.Replace(port.Substring(0, port.IndexOf("/")), "");    
        return path;}" />
	<!-- ###### Setting up Dynamic Operation Uri Path Ends ###### -->
	
        <!-- ###### Request Message Size Validation Starts ###### -->
        <choose>
            <when condition="@(context.Request.Method.Equals("POST") || context.Request.Method.Equals("PUT"))">
                <set-variable name="bodySize" value="@(context.Request.Headers["Content-Length"][0])" />
                <choose>
                    <!-- Bodysize is expressed in Bytes -->
                    <when condition="@(int.Parse(context.Variables.GetValueOrDefault<string>("bodySize"))>{{##Named-Value##}})">
                        <!-- one or more policy statements to be applied if the above condition is true  -->
                        <return-response>
                            <set-status code="400" reason="Bad Request" />
                            <set-header name="ErrorMessage" exists-action="override">
                                <value>Message too large</value>
                            </set-header>
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/json</value>
                            </set-header>
                            <set-body template="liquid">{"statusCode": "400" ,"Message": "Message request too large"}</set-body>
                        </return-response>
                    </when>
                    <otherwise />
                </choose>
            </when>
        </choose>
        <!-- ###### Request Message Size Validation Ends ###### -->


    </inbound>
    <backend>
        <forward-request />
    </backend>
    <outbound>
        <base />
        <!-- ###### Response Message Size Validation Starts ###### -->
        <!-- Response Message Size Validation | Implement the validation using the value stored in Named Value - "template_response_size"-->
        <choose>
            <when condition="@(context.Response.Body.As<string>(preserveContent: true).Length > ({{##Named-Value##}}))">
                <return-response>
                    <set-status code="400" reason="Bad Request" />
                    <set-header name="ErrorMessage" exists-action="override">
                        <value>Message response too large.</value>
                    </set-header>
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>{"statusCode": "400" ,"Message": "Message response too large"}</set-body>
                </return-response>
            </when>
            <otherwise />
        </choose>
        <!-- ###### Response Message Size Validation Ends ###### -->
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
